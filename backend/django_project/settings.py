"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from environs import Env
import os
import pymysql
import requests
pymysql.install_as_MySQLdb()

env = Env()
env.read_env()

def is_ec2_linux():
    """Detect if we are running on an EC2 Linux Instance
    See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/identify_ec2_instances.html
    """
    if os.path.isfile("/sys/hypervisor/uuid"):
        with open("/sys/hypervisor/uuid") as f:
            uuid = f.read()
            return uuid.startswith("ec2")
    return False

def get_token():
    """Set the autorization token to live for 6 hours (maximum)"""
    headers = {
        'X-aws-ec2-metadata-token-ttl-seconds': '21600',
    }
    response = requests.put('http://169.254.169.254/latest/api/token', headers=headers)
    return response.text


def get_linux_ec2_private_ip():
    """Get the private IP Address of the machine if running on an EC2 linux server.
    See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html"""

    if not is_ec2_linux():
        return None
    try:
        token = get_token()
        headers = {
            'X-aws-ec2-metadata-token': f"{token}",
        }
        response = requests.get('http://169.254.169.254/latest/meta-data/local-ipv4', headers=headers)
        return response.text
    except:
        return None
    finally:
        if response:
            response.close()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY", default="8r(-x&$8c=z=&3$x7!k!oe_m2ew5+hu$ujx)ud9o4!qyo6^l#^")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)

# AWS_CNAME = "publish.j9ufdh16ao422.us-west-2.cs.amazonlightsail.com"
AWS_CNAME2 = "http://publish.j9ufdh16ao422.us-west-2.cs.amazonlightsail.com"
AWS_CNAME3 = "https://publish.j9ufdh16ao422.us-west-2.cs.amazonlightsail.com"
FRONTEND_URL = "https://faridascakeboutique.com"
FRONTEND_URL_WWW = "https://www.faridascakeboutique.com"
BACKEND_URL = "https://faridascakeboutiquesbackend.net"
DEV = "http://68.235.50.254"
DEV2 = "http://68.235.50.254"
AWS_CNAME4 = "http://172.26.33.73"
AWS_CNAME5 = "https://172.26.33.73"
LOCAL_DNS = "http://localhost"
LOCAL_DNS2 = "https://localhost"
LOCAL_DNS3 = "http://127.0.0.1"
LOCAL_DNS4 = "https://127.0.0.1"

CSRF_TRUSTED_ORIGINS = [AWS_CNAME3, AWS_CNAME2,FRONTEND_URL, FRONTEND_URL_WWW, BACKEND_URL, \
                  DEV, DEV2, AWS_CNAME4, AWS_CNAME5, LOCAL_DNS, LOCAL_DNS2, LOCAL_DNS3, LOCAL_DNS]

HOST_1 = "publish.j9ufdh16ao422.us-west-2.cs.amazonlightsail.com"
HOST_2 = "faridascakeboutique.com"
HOST_3 = "www.faridascakeboutique.com"
HOST_4 = "68.235.50.254"
HOST_5 = "172.26.33.73"
HOST_6 = "localhost"
HOST_7 = "127.0.0.1"

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ALLOWED_HOSTS = [HOST_1, HOST_2, HOST_3, HOST_4, HOST_5, HOST_6, HOST_7]
private_ip = get_linux_ec2_private_ip()
if private_ip:
   ALLOWED_HOSTS.append(private_ip)
USE_X_FORWARDED_HOST = True


# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'storages',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # 3rd party
    "rest_framework",
    "corsheaders",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "drf_spectacular",
    'django_cleanup.apps.CleanupConfig',
    # For adding google sign in authentication
    "allauth.socialaccount.providers.google",
    # local apps
    "accounts.apps.AccountsConfig",
    "cakes.apps.CakesConfig",
]

# For google sign in authentication
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": "233170599832-ucmqjtfc137qoddrnjdn22793j9cj56r.apps.googleusercontent.com",  # replace me
            "secret": "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",        # replace me
            "key": "",                               # leave empty
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "VERIFIED_EMAIL": True,
    },
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/' # 'http://myhost:port/media/'

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES":[
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Cake boutique website backend",
    "DESCRIPTION": "As per title (Piazza joke if anyone gets it)",
    "VERSION": "0.1.0",
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # cors related middleware
    "corsheaders.middleware.CorsMiddleware",

    # whitenoise middleware
    "whitenoise.middleware.WhiteNoiseMiddleware",

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Add this line
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 'social_django.middleware.SocialAuthExceptionMiddleware',  # <--
]

STATIC_URL = '/staticfiles/'
if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'staticfiles')
    ]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_MANIFEST = os.path.join(STATIC_ROOT, 'staticfiles.json')

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


# CORS_ORIGIN_ALLOW_ALL = False

# CORS_ORIGIN_WHITELIST = (
#         AWS_CNAME, FRONTEND_URL, FRONTEND_URL_WWW, BACKEND_URL, "172.31.4.186",
#                  "34.212.220.116", '127.0.0.1'
# )
# CORS_ALLOWED_ORIGINS = [
#     AWS_CNAME, FRONTEND_URL, FRONTEND_URL_WWW, BACKEND_URL, "172.31.4.186",
#                  "34.212.220.116", '127.0.0.1'
# ]

# Temporary fix
CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_WHITELIST = (
#     "http://localhost:5173",
#     "http://localhost:8000",
#     AWS_CNAME,
#     FRONTEND_URL,
#     FRONTEND_URL_WWW,
# )

# CORS_ALLOW_ALL_ORIGINS = False
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOWED_ORIGINS = [
#     'https://cake-testing-1.web.app',  # Add your frontend's URL here
# ]



ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "django.template.context_processors.request",

#                 'social.apps.django_app.context_processors.backends',
# 'social.apps.django_app.context_processors.login_redirect',
            ],
        },
    },
]




SITE_ID = 2
# To set site_name and site_domain you must either do this manually


WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': "BOUTIQUE",
            'USER': env.str("DATABASE_USER"),
            'PASSWORD': env.str("DATABASE_PASSWORD"),
            'HOST': env.str("DATABASE_HOST"),
            'PORT': 3306,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.CustomUser'
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # or 'optional'


# Rootstrap email backend tutorial
AUTHENTICATION_BACKENDS = [
    # allauth specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    # Needed to login by username in Django admin, regardless of allauth
    'django.contrib.auth.backends.ModelBackend',
    # Let's see if this works
    # 'social_core.backends.github.GithubOAuth2',

]

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'none'


REST_AUTH  = {
    'REGISTER_SERIALIZER': 'accounts.serializers.CustomRegisterSerializer',
     'USER_DETAILS_SERIALIZER': 'accounts.serializers.CustomUserDetailsSerializer',
     'PASSWORD_RESET_USE_SITES_DOMAIN': True,
     'PASSWORD_RESET_SERIALIZER': 'accounts.forms.MyPasswordResetSerializer',
}

REST_USE_JWT = True
JWT_AUTH_COOKIE = 'my-app-auth' # The cookie key name can be the one you want
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
LOGIN_URL = 'http://localhost:5173'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # new
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
# CUSTOM_PASSWORD_RESET_CONFIRM = 'http://localhost:5173/rest-auth/password/reset/confirm/'
LOGOUT_ON_PASSWORD_CHANGE = False


# # Following settings are that for AWS SES sandbox mode configuration!


# You're accessing the development server over HTTPS, but it only supports HTTP. ERROR FIX ATTEMPT
# reason for error was ing LOGIN_URL redirect url included HTTPS by accident!


# FRONTEND_URL = 'localhost:5173/'
# ACCOUNT_EMAIL_CONFIRMATION_URL = FRONTEND_URL + 'verify-email/{}'
# ACCOUNT_PASSWORD_RESET_CONFIRM = FRONTEND_URL + 'password-reset/confirm/'

if DEBUG:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
else:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", default="")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", default="")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", default="")
AWS_QUERYSTRING_AUTH = False